// src/ui/report/exportDraftReport.ts
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

// light types (match your store)
type Pick = {
  hero_id: number;
  role?: number | null;
  profile?: { id: string; name?: string } | null;
};
type Team = Pick[];
type Story = {
  composition?: {
    team1: Record<string, number>;
    team2: Record<string, number>;
  };
  lanes?: { lane: string; label: string; reasons?: string[] }[];
  windows?: { start: number; end: number; label: string }[];
  spikes?: { minute: number; label: string }[];
  positions?: { team1: number[]; team2: number[] };
};
type Hero = { id: number; localized_name: string };

function roleName(r?: number | null) {
  return r ? `Pos ${r}` : "—";
}

export function exportDraftReportPDF(params: {
  heroes: Hero[];
  team1: Team;
  team2: Team;
  story: Story;
  minute: number;
  matchTitle?: string;
}) {
  const { heroes, team1, team2, story, minute, matchTitle } = params;
  const findHero = (id: number) =>
    heroes.find((h) => h.id === id)?.localized_name || `#${id}`;
  const comp = story?.composition || { team1: {}, team2: {} };
  const lanes = story?.lanes || [];
  const windows = story?.windows || [];
  const spikes = story?.spikes || [];

  const doc = new jsPDF({ unit: "pt", compress: true });
  const margin = 36;
  let y = margin;

  // Title
  doc.setFont("helvetica", "bold");
  doc.setFontSize(16);
  doc.text(matchTitle || "Draft Report", margin, y);
  doc.setFont("helvetica", "normal");
  doc.setFontSize(11);
  y += 18;
  doc.text(`Generated @ minute ${minute}`, margin, y);
  y += 14;

  // Teams table
  const teamRows = [
    ...team1.map((p, i) => [
      `T1-${i + 1}`,
      findHero(p.hero_id),
      roleName(p.role),
      p.profile?.id || "",
    ]),
    ["", "", "", ""],
    ...team2.map((p, i) => [
      `T2-${i + 1}`,
      findHero(p.hero_id),
      roleName(p.role),
      p.profile?.id || "",
    ]),
  ];
  autoTable(doc, {
    startY: y,
    head: [["Slot", "Hero", "Role", "Profile"]],
    body: teamRows,
    styles: { fontSize: 10 },
    theme: "grid",
    margin: { left: margin, right: margin },
  });
  y = (doc as any).lastAutoTable.finalY + 16;

  // Composition table
  const axes = [
    "fight",
    "pickoff",
    "push",
    "rosh",
    "sustain",
    "defense",
    "scale",
  ];
  const compRows = axes.map((a) => [
    a,
    Math.round(comp.team1[a] || 0),
    Math.round(comp.team2[a] || 0),
  ]);
  autoTable(doc, {
    startY: y,
    head: [["Axis", "Team 1", "Team 2"]],
    body: compRows,
    styles: { fontSize: 10 },
    theme: "grid",
    margin: { left: margin, right: margin },
  });
  y = (doc as any).lastAutoTable.finalY + 16;

  // Lanes
  if (lanes.length) {
    autoTable(doc, {
      startY: y,
      head: [["Lane", "Status", "Reasons"]],
      body: lanes.map((l) => [l.lane, l.label, (l.reasons || []).join(", ")]),
      styles: { fontSize: 10 },
      theme: "grid",
      margin: { left: margin, right: margin },
    });
    y = (doc as any).lastAutoTable.finalY + 16;
  }

  // Timings (windows + spikes)
  const wRows = windows.map((w) => [`${w.label}`, `${w.start}–${w.end}`]);
  const sRows = spikes.map((s) => [s.label, `${s.minute}`]);
  if (wRows.length || sRows.length) {
    autoTable(doc, {
      startY: y,
      head: [["Objective windows", "Minutes"]],
      body: wRows.length ? wRows : [["—", "—"]],
      styles: { fontSize: 10 },
      theme: "grid",
      margin: { left: margin, right: margin },
    });
    y = (doc as any).lastAutoTable.finalY + 8;
    autoTable(doc, {
      startY: y,
      head: [["Spikes", "Minute"]],
      body: sRows.length ? sRows : [["—", "—"]],
      styles: { fontSize: 10 },
      theme: "grid",
      margin: { left: margin, right: margin },
    });
    y = (doc as any).lastAutoTable.finalY + 16;
  }

  // Footer
  doc.setFontSize(9);
  doc.setTextColor("#666666");
  doc.text("Generated by Dota Timings", margin, y);

  doc.save("draft-report.pdf");
}
